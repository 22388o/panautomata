import unittest

from panautomata.merkle import hashs, merkle_hash, merkle_tree, merkle_path, merkle_proof
from panautomata.utils import bit_set


class MerkleTest(unittest.TestCase):
    def test_merkle(self):
        # Create 99 trees of 1..N items
        for i in range(1, 100):
            items = list(range(0, i))
            tree, root = merkle_tree(items)

            # Verify all items exist within the root
            for item in items:
                proof = merkle_path(item, tree)
                self.assertEqual(merkle_proof(item, proof, root), True)

        # Verify known values, for cross-compatibility with Solidity code
        self.assertEqual((1 << 255), 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        self.assertEqual(bit_set(0, 0xFF), 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        self.assertEqual(root, 49402248492186442897517245895401266802260665337500758963574365718367124339789)
        self.assertEqual(item, 98)
        self.assertEqual(hashs(item), 83711046225124543151096983520047303096360692139175505502564158094739377008156)
        self.assertEqual(merkle_hash(item), 25815001606466445439311491015703349169725699806355223482835366090782812188188)
        self.assertEqual(proof, [25725102692910048050224675034052454651423528331814404505982870032842664884419,
                         48616004894819486342641916909809438214325040151943648775976235865217266405434,
                         55207776538131034386235080634853588803051666126211029295357822566794069708390,
                         95776898880954778065565167983405492133123596201008141852405411721321486089494,
                         115430900598740407475614477702451727417464276200488002297259396972341306878145,
                         27135588043166493562879989209820797655860974197851822040306875373032573005523,
                         85756528672499178608186934456948970484439097541346763434086993483185376933694])
